good
library(MASS)#
data(shuttle)
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))#
#
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")#
summary(fit)#
#
windhead <- fit1$coef[1]#
windtail <- fit1$coef[2]#
#
exp(windtail)/exp(windhead)
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
fit2 <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")#
summary(fit)#
#
windhead2 <- fit2$coef[1]#
windtail2 <- fit2$coef[2]#
#
exp(windtail2)/exp(windhead2)
fit2 <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")#
summary(fit)
fit <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")#
summary(fit)
fit <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")
fit2 <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")#
summary(fit2)
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
library(shiny)
library(manipulate)
library(rCharts)
install.packages("shiny")
install.packages("manipulate")
install.packages("rCharts")
library(shiny)
library(manipulate)
library(manipulate)#
manipulate(plot(1:x), x = slider(1, 100))
install.packages("HistData")
library(HistData)
data(Galton)
summary(Galton)
summary(Titanic)
library(mlbench)
install.packages("mlbench")
library(mlbench)
mlbench.friedman1?
;
mlbench.friedman1?
()
mlbench.friedman1(200)
?rep
rep(c(TRUE), 3)
rep(c(FALSE), 3)
rep(c(TRUE), 3) + rep(c(FALSE), 3)
cbind(rep(c(TRUE), 3), rep(c(FALSE), 3))
rbind(rep(c(TRUE), 3), rep(c(FALSE), 3))
colors()
x = seq(1, 100, length.out=100)
y <- exp(-x*x/2)/(sqrt(2*pi))
plot(x, y)
plot(y, x)
x = seq(-3, 3, length.out=1000)
x
y <- exp(-x*x/2)/(sqrt(2*pi))
y
plot(y, x)
plot(y, x, color='blue')
plot(x, y, type = 'l')
plot(x, y, type = 'l', col = 'blue')
x1 <- dnorm(0, 1)
x2 <- dnorm(0, 2)
x3 <- dnorm(1, 1)
par(mfrow = c(3, 1))#
with()
x = seq(-3, 3, length.out=1000)
x1 <- seq(0, 1, length.out=1000)
x = seq(-3, 3, length.out=1000)
x = seq(-1, 1, length.out=1000)
v <- seq(0, 2*pi, length.out=1000)
x = seq(-3, 3, length.out=1000)
y1 <- dnorm(x, 0, 1)
y2 <- dnorm(x, 0, 2)
y3 <- dnorm(x, 1, 1)
plot(x, y1, col = 'red', type = 'line')
lines(x, y2, col = 'green', type = 'line')
lines(x, y3, col = 'blue', type = 'line')
x <- cos(v)
y <- sin(v)
polygon(x, y, col = 'red')
v
v <- seq(0, 2*pi, length.out=1000)
x <- cos(v)
y <- sin(v)
polygon(x, y)
plot()
polygon(x, y)
v <- seq(0, 2*pi, length.out=1000)
x <- cos(v)
y <- sin(v)
polygon(x, y)
plot.new
plot.new()
polygon(x, y)
# plot(NA, NA, xlim = c(-1, 1), ylim = c(-1, 1))
plot.new()
plot.window(c(-1, 1), c(-1, 1))
t <- seq(0, 2*pi, len = 100)
polygon(x, y)
plot(NA, NA, xlim = c(-1, 1), ylim = c(-1, 1))
plot.new()
plot.window(c(-1, 1), c(-1, 1))
polygon(x, y)
plot(NA, NA, xlim = c(-1, 1), ylim = c(-1, 1))
polygon(x, y)
polygon(x, y, col = 'red', boder = 'red')
polygon(x, y, col = 'red', border = 'red')
?dnorm
?lines
x <- seq(-10, 10, length.out=1000)
x <- runif(25, -5, 5)
y <- 3*x + 2 + rnorm(25, 0, 1)
print(cor(x, y))
plot(x, y)
n <- length(x)
n
x[0]
mx <- mean(x)
my <- mean(y)
x
typeof(x)
sum(x)
sum(y)
sx <- sum(x)
sy <- sum(y)
s <- 0
for (i in 1:n) {#
	coef1 = (x[i] - mx)/sx#
	coef2 = (y[i] - my)/sy#
	s += coef1*coef2#
}
s <- 0
for (i in 1:n) {#
	coef1 <- (x[i] - mx)/sx#
	coef2 <- (y[i] - my)/sy#
	s <- s + coef1*coef2#
}
s
s/n
s/(n-1)
sx <- sd(x)
sy <- sd(y)
s <- 0
for (i in 1:n) {#
	coef1 <- (x[i] - mx)/sx#
	coef2 <- (y[i] - my)/sy#
	s <- s + coef1*coef2#
}
s/(n-1)
print(cor(x, y))
?dnorm
x <- sort(rnorm(10, 1, 5))
x
dnorm(x, 0, 1)
x1 <- dnorm(x, 0, 1)
mean(x1)
std(x1)
x1 <- (x-mean(x))/sd(x)
mean(x1)
sd(x1)
x2 <- (x-min(x))/(max(x) - min(x))
x2
x2 <- 2/(max(x) - min(x))*(x - max(x)) + 1
x2
x
x1
x2 <- (2/(max(x) - min(x)))*(x - max(x)) + 1
x2
q()
x <- c(1, 5, 3, 8 7)
str(list(TRUE, 1, "one"))
x <- c(1, 2, 3, 4, 5, 6)
y <- c(1, 1, 3, 2, 2, 1)+7
x
y
split(x, y)
set.seed(12354)
x <- round(runif(10, -8, 8))
x
sign(x)
factor(sign(x))
y <- split(x, factor(sign(x), levels=c(-1,0,1)))
y
y[0]
y['-1']
y['1']
y['0']
paste(c("A","B","C"), c("d","e","f"))
paste0(c("A","B","C"), c("d","e","f"))
?uname
?unname
as.list(ToothGrowth)
ToothGrowth
as.list(ToothGrowth)
unname(as.list(ToothGrowth))
Pigs <- unname(as.list(ToothGrowth))
Pigs[[2]]
c(1, 2, 3)[2]
c(1, 2, 3)[[2]]
list(1, 2, 3)[-1]
list(1, 2, 3)[[-1]]
list(1, 2, 3)[[1]]
L <- list(1, list(2, 3))
L[1]
L[2]
install.packages("nycflights13")
library(nycflights13)
boxplot(flights$arr_delay ~ flights$dest, main = "Arrival Time Delays [in minutes]", ylim = c(min(flights$arr_delay), max(flights$arr_delay)), ylab = "Minutes")
data_raw<-flights#
head(data_raw)
data_raw$dest = as.factor(data_raw$dest)#
levels(data_raw$dest)
data_clean<-na.omit(data_raw)
hist(data_clean$arr_delay, main = "Arrival Time Delays [in minutes]")
require(nycflights13)
head(flights)
head(airports)
head(airlines)
head(weather)
head(planes)
df <- planes
df[df$tailnum == "N14228"]
df[df$tailnum == "N14228", ]
df <- merge(flights, planes, by = "tailnum")
nrow(flights)
nrow(planes)
nrow(df)
df <- merge(flights, planes, all.x=TRUE, all.y=TRUE, by = "tailnum")
nrow(df)
FP <- df
airlines[airlines$carrier == "UA", ]
FA <- merge(flights, airlines, all.x=TRUE, all.y=TRUE, by = "carrier")
head(FP)
head(FA)
?quarters
data(mtcars)
names(mtcars)
unique(mtcars$am)
mtcars$am <- as.factor(mtcars$am)
mtcars$am
levels(mtcars$am) <- c("Automatic", "Manual")
unique(mtcars$mpg)
aggregate(mpg~am, data = mtcars, mean)
autoData <- mtcars[mtcars$am == "Automatic",]
manualData <- mtcars[mtcars$am == "Manual",]
t.test(autoData$mpg, manualData$mpg)
mtcars[1, ]
sort(mtcars[1, ])
sort(cor(mtcars)[1, ])
sort(cor(mtcars)[1,])
data(mtcars)
sort(cor(mtcars)[1,])
?lm
fit <- lm(mpg~am, data = mtcars)#
summary(fit)
stepmodel = step(lm(data = mtcars, mpg ~ .),trace=0,steps=10000)summary(stepmodel)
bestfit <- lm(mpg~am + wt + qsec, data = mtcars)anova(fit, bestfit)
bestfit
lm(mpg~am + wt + qsec, data = mtcars)
anova(fit, bestfit)
summary(bestfit)
install.packages("knitr")
install.packages("knitr", repos="http://cran.rstudio.com/")
install.packages("knitr")
install.packages("knitr", repos="http://cran.rstudio.com/")
install.packages("knitr", repos="http://cran.rstudio.com/")
install.packages("knitr", repos="http://cran.rstudio.com/")
library(knitr)
setwd("DSR/GrantPredict/")
shQuote("Grant_Prediction")
shQuote("Grant_Prediction.pdf")
require(knitr)
require(tools)
require(ggplot2)
