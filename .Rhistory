install.packages("devtools")
library(devtools)
install_github('slidefy', 'ramnathv')
install_github('slidefyLibraries', 'ramnathv')
library(slidify)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(15,25))
library(manipulate)
myHist <- function(mu) {}
myHist <- function(mu) {
hist(galton$child, col = "blue", breaks = 100)
lines(c(mu, mu), c(0, 150), col = "red", lwd = 5)
mse <- mean(galton$child - mu)^2
text(63, 150, paste("mu = ", mu))
tetx(63, 140, paste("MSE = "), round(mse, 2)))
myHist <- function(mu) {
hist(galton$child, col = "blue", breaks = 100)
lines(c(mu, mu), c(0, 150), col = "red", lwd = 5)
mse <- mean(galton$child - mu)^2
text(63, 150, paste("mu = ", mu))
tetx(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(usingR)
library(UsingR)
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu) {
hist(galton$child, col = "blue", breaks = 100)
mse <- mean(galton$child - mu)^2
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(shiny)
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
plot(1:100)
manipulate()
manipulate(
plot(cars, xlim = c(0, x.max)),
x.max = slider(15, 25))
?plot
?xlim
plot(cars, xlim = c(0, x.max)),
manipulate(
plot(cars, xlim = c(0, x.max)),
x.max = slider(15, 25))
library(shiny)
library(manipulate)
plot(cars, xlim = c(0, x.max)),
manipulate(
plot(cars, xlim = c(0, x.max)),
x.max = slider(15, 25))
summary(cars)
head(cars)
manipulate(
plot(cars$speed, cars$dist, xlim = c(0, x.max)),
x.max = slider(15, 25))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(HistData)
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
summary(galton)
data(galton)
library(psych)
install.packages("HistData")
install.packages("HistData")
library(HistData)
data(Galton)
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
hist(Galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((Galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
summary(galton)
summary(Galton)
head(Galton)
manipulate(
barplot(as.matrix(longley[,factor]),
beside = TRUE, main = factor),
factor = picker("GNP", "Unemployed", "Employed"))
summary(longley)
head(longley)
longley[1:3, ]
longley[1:3, 1:3]
barplot(as.matrix(longley[,'GNP']), beside = TRUE, main = 'GNP')
barplot(as.matrix(longley[,'GNP']), beside = TRUE, main = 'Employed')
barplot(as.matrix(longley[,'GNP']), beside = TRUE, main = 'GNP')
barplot(as.matrix(longley[,'GNP']), beside = TRUE, main = 'Employed')
barplot(as.matrix(longley[,'Employed']), beside = TRUE, main = 'Employed')
barplot(as.matrix(longley[,'Unemployed']), beside = TRUE, main = 'Unemployed')
manipulate(
boxplot(Freq ~ Class, data = Titanic, outline = outline),
outline = checkbox(FALSE, "Show outliers"))
summary(Titanic)
head(Titanic)
typeof(Titanic)
Titanic
factor(Titanic)
manipulate(
plot(cars, xlim = c(0, x.max), type = type, ann = label),
x.max = slider(10, 25, step=5, initial = 25),
type = picker("Points" = "p", "Line" = "l", "Step" = "s"),
label = checkbox(TRUE, "Draw Labels"))
require(rCharts)
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
2 + 2
library(nycflights13)
df <- planes
sdf <- df[df$seats > 200]
sdf <- df[df$seats > 200, drop=FALSE]
df[df$seats > 200, drop=FALSE]
df[df$seats > 200]
df[df$seats > 200, ]
sdf <- df[df$seats > 200, ]
head(sdf)
tapply(sdf$manufacturer, sdf$manufacturer, length)
sdf <- tapply(df$manufacturer, df$manufacturer, length)
head(sdf)
aggregate(df$manufacturer, df[c("manufacturer")], length)
?aggregate
sdf <- aggregate(df$manufacturer, df[c("manufacturer")], length)
merge(df, sdf, by = "tailnum")
sdf
sdf <- aggregate(df$manufacturer, df[c("manufacturer")], length)
sdf
sdf <- tapply(df$manufacturer, df$manufacturer, length)
sdf
sdf <- aggregate(df$manufacturer, df[c("manufacturer")], length)
merge(df, sdf, by = "manufacturer")
df <- merge(df, sdf, by = "manufacturer")
nrow(planes)
nrow(df)
head(df)
head(planes)
df <- planes
sdf <- aggregate(df$manufacturer, df[c("manufacturer")], length)
df <- merge(df, sdf, by = "manufacturer")
sdf <- df[df$x > 10, ]
head(sdf)
df <- planes
x <- df[df$seats > 200, ]
aggregate(x$manufacturer, x["manufacturer"], length)
sapply(split(x$manufacturer, x$manufacturer), length)
?split
df <- planes
sapply(split(x$manufacturer, x$manufacturer), length)
head(df)
sdf <- sapply(split(x$manufacturer, x$manufacturer), length)
head(sdf)
head(sdf, 10)
unique(df$manufacturer)
df <- planes
sdf <- aggregate(df$manufacturer, df[c("manufacturer")], length)
head(sdf, 10)
?aggregate
colnames(sdf) <- c("manufacturer", "howmany")
head(sdf, 10)
df <- merge(df, sdf, by = "manufacturer")
head(df)
df[order(howmany), ]
df[order(df$howmany), ]
sdf <- df[order(df$howmany), ]
nrow(df)
nrow(sdf)
head(df)
head(sdf)
sdf <- df[order(-df$howmany), ]
head(sdf)
sdf <- df[df$year >= 2012]
sdf <- df[df$year >= 2012]
sdf <- df[df$year >= 2012, ]
df <- planes
df <- df[df$year >= 2012, ]
sdf <- df[order(df$year, df$seats), ]
df <- planes
df[sample(nrow(df), 100), ]
nrow(df[sample(nrow(df), 100), ])
df[sample(nrow(df), nrow(df)/20), ]
nrow(df[sample(nrow(df), nrow(df)/20), ])
nrow(df)
df <- planes
df <- df[df$year >= 2012, ]
df[order(df$year, df$seats), ]
df[order(df$year, df$seats), c("year", "seats")]
airports[sample(1:nrow(airports), 10), ]
head(flights)
head(airports)
?matrix
a <- matrix(c("a", "b", "c", "u", "v", "w"), 3)
a
b <- matrix(c("a", "b", "d", "a", "1", "2", "3", "4"), 4)
b
A <- matrix(c("a", "b", "c", "u", "v", "w"), 3)
B <- matrix(c("a", "b", "d", "a", "1", "2", "3", "4"), 4)
merge(A, B)
head(flights)
head(planes)
head(airports)
require(nycflights13)
weather$dt <- ISOdatetime(weather$year, weather$month, weather$day, weather$hour, 0, 0)
head(weather)
class(weather$dt)
typeof(weather$dt)
Sys.time()
Sys.time() - weather$dt[1]
strptime("2016-04-29 14:06:20", "%Y-%m-%d %H:%M:%S")
strptime(Sys.time(), "%H:%M")
strftime(Sys.time(), "%H:%M")
library(stringi)
stri_startswith_fixed(planes$manufacturer, "AIRBUS")
head(planes[stri_startswith_fixed(planes$manufacturer, "AIRBUS"), ]
)
head(planes[stri_startswith_fixed(planes$manufacturer, "AIRBUS"), ])
head(stri_detect_fixed(planes$manufacturer, "AIRBUS"))
stri_count_fixed("a.b.c.d.e", ".")
stri_locate_all_fixed(c("a.b.c.d.e", "abfd", "avd.ds"), ".")
stri_locate_all_fixed()
stri_locate_all_fixed
?stri_locate_all_fixed
stri_locate_all_fixed(c("a.b.c.d.e", "abfd", "avd.ds"), ".")
?stri_locate_all_fixed
stri_replace_all_fixed(c("a.b.c.d.e", "abfd", "avd.ds"), ".", "_")
stri_locate_all_fixed(c("abc.d.e", "abfd", "avd.ds"), "ab")
stri_replace_all_fixed(c("abc.d.e", "abfd", "avd.ds"), "ab", "cd")
stri_split_fixed(c("a.b.c.d.e", "abfd", "avd.ds"), ".")
stri_count_regex("abc123aAa", "a.")
stri_count_regex("abdwzAWZ12! @[]", "adz")[[1]]
stri_extract_all_regex("abdwzAWZ12! @[]", "adz")[[1]]
stri_extract_all_regex("abdwzAWZ12! @[]", "[adz]")[[1]]
stri_extract_all_regex("abdwzAWZ12! @[]", "[^adz]")[[1]]
stri_extract_all_regex("abdwzAWZ12! @[]", "[a-z]")[[1]]
stri_extract_all_regex("abdwzAWZ12! @[]", "[A-Z]")[[1]]
stri_extract_all_regex("abdwzAWZ12! @[]", "[A-z]")[[1]]
stri_extract_all_regex("abdwzAWZ12! @[]", "[A-Za-z]")[[1]]
stri_extract_all_regex("abdwzAWZ12! @[]", "[a-z]i+h")[[1]]
stri_extract_all_regex("abdacaddabab", "ab|dd")[[1]]
text <- "#germany #berlin #dsr #r Our approach to teaching is highly opinionated, and is based on our extensive experience in state-of-the-art machine learning, data science, and #big #data #engineering."
stri_extract_all_regex(text, "\#[A-z]+\ ")[[1]]
stri_extract_all_regex(text, "#[A-z]+\ ")[[1]]
stri_extract_all_regex(text, "#\.+\ ")[[1]]
stri_extract_all_regex(text, "#(\.)+\ ")[[1]]
stri_extract_all_regex(text, "#(.+)\ ")[[1]]
stri_extract_all_regex(text, "#[\\p{L}\\p{N}_]")[[1]]
stri_extract_all_regex(text, "#[\\p{L}\\p{N}_]+")[[1]]
stri_extract_all_regex(text, "\\(.+?\\)")[[1]]
stri_extract_all_regex("aa(bbb)(ccc)", "\\(.+?\\)")[[1]]
nb <- "12.123", -53, +1e-9, -1.2423e10, .2, 4. "
nb <- "12.123, -53, +1e-9, -1.2423e10, .2, 4. "
stri_extract_all_regex(nb, "e\\d+")[[1]]
stri_extract_all_regex(nb, "e[-?]\\d+")[[1]]
stri_extract_all_regex(nb, "e-?\\d+")[[1]]
stri_extract_all_regex(nb, "\\d+e-?\\d+")[[1]]
stri_extract_all_regex(nb, "(+|-).?\\d+e-?\\d+")[[1]]
stri_extract_all_regex(nb, "[+,-].?\\d+e-?\\d+")[[1]]
stri_extract_all_regex(nb, "[+,-]\\d.?\\d+e-?\\d+")[[1]]
stri_extract_all_regex(nb, "[+,-]\\d*.?\\d+e-?\\d+")[[1]]
nb
stri_extract_all_regex(nb, "[+,-]\\d*.?\\d+[e-?\\d+]+")[[1]]
stri_extract_all_regex(nb, "{+,-}\\d*.?\\d+[e-?\\d+]+")[[1]]
stri_extract_all_regex(nb, "\\d*.?\\d+[e-?\\d+]+")[[1]]
stri_extract_all_regex(nb, "\\d+.?\\d+[e-?\\d+]+")[[1]]
stri_extract_all_regex(nb, "[+,-]\\d*.?\\d+e-?\\d+")[[1]]
stri_extract_all_regex(nb, "[+,-]\\d*.?\\d+")[[1]]
nb
stri_extract_all_regex(nb, "[+,-]\\d*.?\\d+e-?\\d+")[[1]]
stri_extract_all_regex(nb, "[+-]?[0-9]+(\\.[0-9]+)?")[[1]]
nb
list.files("/Users/tvnguyen/Music/MP3")
head(list.files("/Users/tvnguyen/Music/MP3", recursive = TRUE))
music <- list.files("/Users/tvnguyen/Music/MP3", recursive = TRUE)
class(music)
typeof(music)
stri_extract_all_regex(music[1], "\\.mp3")[[1]]
stri_extract_all_regex(music[1], "(.+)\\.mp3")[[1]]
?apply
apply(music, 1, function(x) stri_extract_all_regex(x, "(.+)\\.mp3")[[1]])
lapply(music, function(x) stri_extract_all_regex(x, "(.+)\\.mp3")[[1]])
lapply(music, function(x) stri_extract_all_regex(x, "(.+)\\(.mp3)$")[[1]])
lapply(music, function(x) stri_extract_all_regex(x, "(.+)\\.mp3"))
lapply(music, function(x) stri_extract_all_regex(x, "(.+)\\(.mp3)$")[[1]])
lapply(music, function(x) stri_extract_all_regex(x, "(.+)\\.mp3"))
music <- list.files("/Users/tvnguyen/Music/MP3/English/", recursive = TRUE)
stri_extract_all_regex(music[1], "(.+)\\.mp3")[[1]]
stri_extract_all_regex(music[1], "(.+)\\(.mp3$)")[[1]]
stri_extract_all_regex(music[1], "(.+)\\(.mp3)$")[[1]]
stri_extract_all_regex(music[1], "(.+)\\(.mp3$)")[[1]]
stri_extract_all_regex(music[1], "(.+)\\.mp3$")[[1]]
stri_extract_all_regex(music[1], "(.+)\\.mp3$")[[1]]
lapply(music, function(x) stri_extract_all_regex(x, "(.+)\\.mp3$"))
lapply(music, function(x) stri_extract_all_regex(x, "(.+)\\.mp3$"))[[1]]
lapply(music, function(x) stri_extract_all_regex(x, "(.+)\\.mp3$"))
lapply(music, function(x) stri_extract_all_regex(x, "A(.+)\\.mp3$"))
lapply(music, function(x) stri_extract_all_regex(x, "A(.+)\\.mp3"))
music[stri_detect_regex(music, "\\.mp3$")]
library(knitr)
require(nycflights13)
df <- flights
df <- na.omit(df)
head(df)
hist(df$arr_delay, col = "blue", breaks = 20)
df$arr_delay <- as.factor(df$arr_delay)
levels(df$arr_delay)
df <- flights
df <- na.omit(df)
df$dest <- as.factor(df$dest)
levels(df$dest)
boxplot(df$arr_delay ~ df$dest, xlab = "Destination", ylab = "Arrival Time Delay (in minutes)", ylim = c(min(df$arr_delay), max(df$arr_delay)))
df$carrier <- as.factor(df$carrier)
levels(df$carrier)
head(carrier)
head(airlines)
df <- merge(df, airlines, by = "carrier")
head(df)
boxplot(df$arr_delay ~ df$carrier, xlab = "Carrier", ylab = "Arrival Time Delay (in minutes)", ylim = c(min(df$arr_delay), max(df$arr_delay)))
boxplot(df$arr_delay ~ df$carrier, type = "l", xlab = "Carrier", ylab = "Arrival Time Delay (in minutes)", ylim = c(min(df$arr_delay), max(df$arr_delay)))
plot(df$carrier, df$arr_delay, type = "l", xlab = "Carrier", ylab = "Arrival Time Delay (in minutes)", ylim = c(min(df$arr_delay), max(df$arr_delay)))
dfF <- flights
barplot(df[c("arr_delay", "carrier"), xlab = "Carrier"], ylab = "Arrival Time Delay (in minutes)", ylim = c(min(df$arr_delay), max(df$arr_delay))))
barplot(df[c("arr_delay", "carrier")], xlab = "Carrier", ylab = "Arrival Time Delay (in minutes)", ylim = c(min(df$arr_delay), max(df$arr_delay))))
df[c("arr_delay", "carrier")]
head(df[c("arr_delay", "carrier")])
barplot(df[c("arr_delay", "carrier")], xlab = "Carrier", ylab = "Arrival Time Delay (in minutes)", ylim = c(min(df$arr_delay), max(df$arr_delay)))
barplot(df$carrier, main = "Carrier")
counts <- table(mtcars$gear)
head(counts)
head(df)
barplot(df$year, main = "Year")
barplot(df$flight, main = "Year")
barplot(flights$carrier, main = "Carrier")
barplot(df$flight, main = "Flight")
View(data_clean)
rm(list=ls())
rm(list=ls())
